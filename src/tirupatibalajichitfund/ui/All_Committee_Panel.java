/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tirupatibalajichitfund.ui;

import java.awt.Font;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import tirupatibalajichitfund.db.*;
import tirupatibalajichitfund.utility.AllCommitteeUtility;
import tirupatibalajichitfund.utility.Constants;

/**
 *
 * @author abhishek
 */
/*class Fr extends JFrame
 {
 Fr() throws Exception{
 this.add(new All_Committee_Panel());
 }
 public static void main(String[] arg) throws Exception
 {
 Fr t=new Fr();
 t.setSize(1680,1080);
 t.setVisible(true);
    
 }
 }*/
public class All_Committee_Panel extends javax.swing.JPanel {

    public AllCommitteeClass allcommittee;
    DefaultTableModel dtm;
    String name;
    int cfid, row;

    /**
     * Creates new form All_Committee_Panel
     */
    public All_Committee_Panel() throws Exception {
        initComponents();
        getTransactions.setEnabled(false);
        saveButton.setEnabled(false);
        allcommittee = AllCommitteeClass.getInstance();
        dtm = new DefaultTableModel(0, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (!editButton.isEnabled()) {
                    if ((column == 3 || column == 4 || column == 5 || column == 6) && row == getSingleClickrow()) {
                        return true;
                    }
                }
                return false;
            }
        };
        allCommitteeTable.setModel(dtm);
        allCommitteeTable.getTableHeader().setFont(new Font("Ubuntu", Font.PLAIN, 16));
        allCommitteeTable.getAutoscrolls();
        allCommitteeTable.setRowHeight(40);
        allCommitteeTable.setFont(new Font("Serif", Font.PLAIN, 16));
        setuptable(allcommittee.getAllCommitteesActive());
    }

    private void setuptable(ArrayList<CommitteeData> committees) {
        int count = 0;
        dtm.addColumn("Sno");
        dtm.addColumn("Chit Fund ID");
        dtm.addColumn("Committee Name");
        dtm.addColumn("Start Date");
        dtm.addColumn("End Date");
        dtm.addColumn("Amount");
        dtm.addColumn("Current Turn");
        for (CommitteeData committee : committees) {
            count++;
            dtm.addRow(new Object[]{count, committee.getCfid(), committee.getCname(), committee.getstartdate(), committee.getenddate(), committee.getAmount(), committee.getTurn()});
            System.out.println("" + Integer.toString(count) + "" + Integer.toString(committee.getCfid()) + committee.getCname() + committee.getstartdate() + committee.getenddate()
                    + committee.getAmount() + "" + committee.getTurn());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        allCommitteeTable = new javax.swing.JTable();
        getTransactions = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        addCommittee = new javax.swing.JButton();
        deleteCommittee = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        setPreferredSize(new java.awt.Dimension(1600, 800));

        allCommitteeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Chit Fund ID", "Committee Name", "Start Date", "End Date", "Amount", "Current Turn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allCommitteeTable.setPreferredSize(new java.awt.Dimension(1700, 700));
        allCommitteeTable.getTableHeader().setReorderingAllowed(false);
        allCommitteeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                allCommitteeTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(allCommitteeTable);
        if (allCommitteeTable.getColumnModel().getColumnCount() > 0) {
            allCommitteeTable.getColumnModel().getColumn(2).setPreferredWidth(130);
        }

        getTransactions.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        getTransactions.setText("GET TRANSACTIONS");
        getTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTransactionsActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        editButton.setText("EDIT");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        openButton.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        openButton.setText("OPEN");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        addCommittee.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        addCommittee.setText("ADD COMMITTEE");
        addCommittee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommitteeActionPerformed(evt);
            }
        });

        deleteCommittee.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        deleteCommittee.setText("DELETE COMMITTEE");
        deleteCommittee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommitteeActionPerformed(evt);
            }
        });

        refreshButton.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        refreshButton.setText("REFRESH");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(getTransactions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addCommittee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteCommittee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 70, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(getTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(addCommittee, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(deleteCommittee, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setSingleClickCfid(int cfid) {
        this.cfid = cfid;
    }

    private void setSingleClickCname(String name) {
        this.name = name;
    }

    private int getSingleClickCfid() {
        return this.cfid;
    }

    private String getSingleClickCname() {
        return this.name;
    }

    private void setSingleClickrow(int row) {
        this.row = row;
    }

    private int getSingleClickrow() {
        return this.row;
    }

    private void enableButtons() {
        editButton.setEnabled(true);
        getTransactions.setEnabled(false);
        try {
            MainFrameChitFund.getInstance().enableBack();
        } catch (Exception ex) {
            Logger.getLogger(All_Member_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        saveButton.setEnabled(false);
        openButton.setEnabled(true);
        addCommittee.setEnabled(true);
        deleteCommittee.setEnabled(true);
        refreshButton.setEnabled(true);
    }

    private void disableButtons() {
        editButton.setEnabled(false);
        getTransactions.setEnabled(false);
        try {
            MainFrameChitFund.getInstance().disableBack();
        } catch (Exception ex) {
            Logger.getLogger(All_Member_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        saveButton.setEnabled(true);
        openButton.setEnabled(false);
        addCommittee.setEnabled(false);
        deleteCommittee.setEnabled(false);
        refreshButton.setEnabled(false);
    }

    private void allCommitteeTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allCommitteeTableMousePressed
        // TODO add your handling code here:
        if (allCommitteeTable.equals(evt.getSource())) {
            allCommitteeTable = (JTable) evt.getSource();
            int row = allCommitteeTable.getSelectedRow();
            int column = allCommitteeTable.getSelectedColumn();
            int CFid = (int) allCommitteeTable.getValueAt(row, 1);
            String name = (String) allCommitteeTable.getValueAt(row, 2);
            if (evt.getClickCount() == 1) {

                //allCommitteeTable = (JTable) evt.getSource();
                // int row = allCommitteeTable.getSelectedRow();
                // int column = allCommitteeTable.getSelectedColumn();
                // int CFID = (Integer) allCommitteeTable.getValueAt(row, 1);
                // int Cfid = (int) allCommitteeTable.getValueAt(row, 1);
                //  String name = (String) allCommitteeTable.getValueAt(row, 2);
                if (editButton.isEnabled()) {
                    setSingleClickCfid(CFid);
                    setSingleClickCname(name);
                    setSingleClickrow(row);
                    getTransactions.setEnabled(true);
                }
            }
            if (evt.getClickCount() == 2 && editButton.isEnabled() && column == 1) {

                try {
                    MemberInfoClass memincls = MemberInfoClass.getInstance();
                    ArrayList<MemberInfoData> dataset = memincls.getDatasetForCfid(CFid);
                    MainFrameChitFund.getInstance().setupInComMemberPanel(dataset, name);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error Occurred whilefetching members inside committee");
                    Logger.getLogger(All_Committee_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_allCommitteeTableMousePressed

    private void getTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTransactionsActionPerformed
        // TODO add your handling code here:
        if (getSingleClickCname() == null || getSingleClickCfid() < 200000) {
            JOptionPane.showMessageDialog(this, "Please select a committee");
            return;
        }
        try {
            ArrayList<TransactionData> dataset = TransactionTableClass.getInstance().getAllTransactionsForCFID(getSingleClickCfid());
            MainFrameChitFund.getInstance().setupTransactionTable(dataset, getSingleClickCname(), Constants.COMMITTEE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occurred whilefetching members inside committee");
            Logger.getLogger(All_Committee_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getTransactionsActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        if (editButton.equals(evt.getSource())) {
            if (getSingleClickCname() == null || getSingleClickrow() < 0) {
                JOptionPane.showMessageDialog(this, "Please select a committee");
                return;
            }
            disableButtons();

        }
    }//GEN-LAST:event_editButtonActionPerformed

    public void refresh() throws Exception {
        MainFrameChitFund.getInstance().setupCommitteeTable();
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (saveButton.equals(evt.getSource())) {
            if (!editButton.isEnabled()) {
                String newstartdate = (String) allCommitteeTable.getValueAt(getSingleClickrow(), 3);
                String newenddate = (String) allCommitteeTable.getValueAt(getSingleClickrow(), 4);
                int newamount = Integer.parseInt((String) allCommitteeTable.getValueAt(getSingleClickrow(), 5).toString());
                int turn = Integer.parseInt((String) allCommitteeTable.getValueAt(getSingleClickrow(), 6).toString());
//                int turn = (Integer) allCommitteeTable.getValueAt(getSingleClickrow(), 6);
                AllCommitteeUtility.getInstance().updateCommittee(getSingleClickCfid(), newstartdate, newenddate,
                        newamount, turn);
                enableButtons();
                try {
                    refresh();
                } catch (Exception ex) {
                    Logger.getLogger(All_Member_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:
        if (openButton.equals(evt.getSource())) {
            if (getSingleClickCname() == null || getSingleClickCfid() < 200000) {
                JOptionPane.showMessageDialog(this, "Please select a committee");
                return;
            }

            try {
                MemberInfoClass memincls = MemberInfoClass.getInstance();
                ArrayList<MemberInfoData> dataset = memincls.getDatasetForCfid(getSingleClickCfid());
                MainFrameChitFund.getInstance().setupInComMemberPanel(dataset, getSingleClickCname());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error Occurred whilefetching members inside committee");
                Logger.getLogger(All_Committee_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        if (refreshButton.equals(evt.getSource())) {
            try {
                this.refresh();
            } catch (Exception ex) {
                Logger.getLogger(All_Member_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void addCommitteeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommitteeActionPerformed
        // TODO add your handling code here:
        if (addCommittee.equals(evt.getSource())) {
            if (AllCommitteeUtility.getInstance().addNewCommittee()) {
                JOptionPane.showMessageDialog(this, "New committee added");
                try {
                    refresh();
                } catch (Exception ex) {
                    Logger.getLogger(All_Member_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_addCommitteeActionPerformed

    private void deleteCommitteeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommitteeActionPerformed
        // TODO add your handling code here:
        if (deleteCommittee.equals(evt.getSource())) {
            if (getSingleClickrow() < 0 || getSingleClickCname() == null || getSingleClickCfid() < 200000) {
                JOptionPane.showMessageDialog(this, "Please select a committee");
                return;
            }
            int dialogres = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete a committee?");
            if (dialogres == JOptionPane.YES_OPTION) {
                try {
                    AllCommitteeUtility.getInstance().deleteCommittee(getSingleClickCfid());

                    refresh();
                } catch (SQLException ex) {
                    Logger.getLogger(All_Member_Panel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(All_Member_Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                return;
            }
        }
    }//GEN-LAST:event_deleteCommitteeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCommittee;
    private javax.swing.JTable allCommitteeTable;
    private javax.swing.JButton deleteCommittee;
    private javax.swing.JButton editButton;
    private javax.swing.JButton getTransactions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
